class Solution extends Backbone.Model {
	constructor(options) {
		super(options);
	}
}

class SolutionList extends BaseCollection {

	constructor(options) {
		this.url = '/solution';
		this.model = Solution;
		super(options);
	}
}

class SolutionPageView extends BaseView {
	constructor(options) {
		this.el = '.content';
		super(options);
	}

	initialize(){
		this.collection = new SolutionList();
		this.solutionMapView = new SolutionMapView();
		this.solutionListView = new SolutionListView({
			solutions:this.collection,
			mapView:this.solutionMapView
		});

		var that = this;
		this.collection.fetch({success: function(){that.render()}});

	}

	render(){
		this.$el.html(Templates.solutionPageTemplate());

		this.$el.find(".solution-list").html(this.solutionListView.render().el);
		this.solutionMapView.render();
		return this;
	}
}

class SolutionListView extends BaseView {

	constructor(options) {
		super(options);
	}

	initialize(options){
		this.collection = options.solutions;
		this.mapView = options.mapView;
		this.listenTo(this.collection, "add", this.render);
		var that = this;
		//this.collection.fetch({success: function(){that.render()}});
	}

	render() {
		this.$el.html(Templates.solutionListTemplate({solution:this.collection.toJSON()}));
		var sel = this.$el.find(".solution-select")
		var that = this;
		sel.click(function() {
			that.mapView.drawSolution(that.collection.get($(this).data("target")));
		});
		return this;
	}
}


class SolutionMapView extends BaseView {

	constructor(options) {
		super(options);
	}

	render(){
		this.map = L.map('map').setView([51.505, -0.09], 13);
		L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar'}).addTo(this.map);
		return this;
	}

	drawSolution(solution) {
		var stopsToLoad = solution.get("stopsToLoad");

		for (var i = 0; i < stopsToLoad.length; i++) {
			this.addToMap(stopsToLoad[i]);
		}

		var depot = solution.get("depot");
		this.addToMap(depot);
	}

	addToMap(entity) {
		var x = entity.location.x;
		var y = entity.location.y;
		var marker = L.marker([y, x]).addTo(this.map);
	}



}
//export {SolutionList, SolutionPageView, SolutionListView, SolutionMapView}




