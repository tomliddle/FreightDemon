class Solution extends Backbone.Model {
	constructor(options) {
		super(options);
	}
}

class SolutionList extends BaseCollection {
	constructor(options) {
		this.url = '/solution';
		this.model = Solution;
		super(options);
	}
}

class SolutionPageView extends BaseView {
	constructor(options) {
		this.el = '.content';
		this.events = {
			"submit form.solution": "runSolution"
		}
		super(options);
	}

	initialize(){
		this.collection = new SolutionList();
		this.solutionListView = new SolutionListView({solutions:this.collection});

		var that = this;
		this.collection.fetch({success: function(){that.render()}});
	}

	render(){
		this.$el.html(Templates.solutionPageTemplate());
		this.$el.find(".solution-list").append(this.solutionListView.render().$el);
		// Map is rendered by external lib so we don't need to append
		//this.solutionMapView.render(this.collection.get(1));
		return this;
	}

	runSolution(e) {
		e.preventDefault();
		var selected = $(e.target).find("input[name='solution-select']:checked");
		var y = selected.data("target");
		var that = this;
		$.ajax({
			url: "/solution/run/" + y,
			dataType: "json"
		})
			.done(function(solution) {
				that.collection.set(solution);
			})
			.fail(function() {
				alert( "error" );
			});
	}
}

class SolutionListView extends BaseView {
	constructor(options) {
		this.tagName = "tbody";
		super(options);
	}

	initialize(options){
		this.collection = options.solutions;
		this.listenTo(this.collection, "add", this.render);
		this.listenTo(this.collection, "change", this.change);
	}

	render() {
		this.collection.forEach(function(solution) {
			var solutionView = new SolutionView({model: solution});
			this.$el.html(solutionView.render().$el);
		}, this);
		return this;
	}

	change() {
		alert("update")
	}
}

// Each row of the table
class SolutionView extends BaseView {
	constructor(options) {
		this.tagName = "tr";
		this.events = {
			"click input[type=radio]": "drawSolution"
		}
		super(options);
	}

	render() {
		this.$el.html(Templates.solutionTemplate({solution: this.model.toJSON()}));
		return this;
	}

	drawSolution(e) {
		//this.mapView.drawSolution(this.model);
	}
}



