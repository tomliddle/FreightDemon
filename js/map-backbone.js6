
class SolutionMapView extends BaseView {

	el() { return ".mapdiv" }

	constructor(options) {
		super(options);
		this.evt = options.evt;
	}

	initialize() {
		this.listenTo(this.evt, "setSolution", this.setModel);
	}

	setModel(model) {
		alert("set model")
		this.model= model;
	}

	show() {
		super.show();
		this.render();
		return this;
	}

	render() {

		if (!this.rendered) {
			this.rendered = true;
			this.$el.html(Templates.mapTemplate());
			var $map = this.$el.find("#map").get(0);
			this.map = L.map($map).setView([51.505, -0.09], 13);
			L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar'}).addTo(this.map);
			this.layerGroup = L.layerGroup().addTo(this.map);
		}

		var model = this.evt.getSolution();
		if (model) {
			this.drawSolution(model);
		}

		return this;
	}

/*	runSolution() {
		//e.preventDefault();
		//var selected = $(e.target).find("input[name='solution-select']:checked");
		var y = 1;//selected.data("target");
		var that = this;
		$.ajax({
			url: "/solution/run/" + y,
			dataType: "json"
		})
			.done(function(solution) {

				that.drawSolution(solution);
			})
			.fail(function() {
				alert( "error" );
			});
	}*/

	drawSolution(model) {
		this.model = model;

		if (this.rendered) {
			this.layerGroup.clearLayers();

			var depot = this.model.get("depot");
			if (depot)
				this.addToMap(0, depot);

			var trucks = this.model.get("trucks");

			for (var i = 0; i < trucks.length; i++) {
				this.drawRoute(trucks[i], depot);
			}
		}
	}

	addToMap(number, entity) {
		var x = entity.x;
		var y = entity.y;
		L.marker([y, x])
			.addTo(this.layerGroup)
			.bindPopup(number + " " + entity.name + " " + entity.startTime || "" + " " + entity.endTime || "");
	}

	drawRoute(truck, depot) {
		var latlngs  = [this.getLatLng(depot)];

		var stops = truck.stops;

		for (var i = 0; i < stops.length; i++) {
			var stopCoords = this.getLatLng(stops[i]);
			latlngs.push(stopCoords);

			this.addToMap(i + 1, stops[i]);
		}

		latlngs.push(this.getLatLng(depot));

		var polyline = L.polyline(latlngs, {color: 'red'}).addTo(this.layerGroup);

		// zoom the map to the polyline
		this.map.fitBounds(polyline.getBounds());
	}

	getLatLng(entity) {
		return L.latLng(entity.y, entity.x)
	}
}



